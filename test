import random
import asyncio
import discord
import youtube_dl
from discord.ext import commands
import re
import sys
import os

# 自分のBotのアクセストークンに置き換えてください
TOKEN = 'OTU5NzA2NzUyNzgwMjM4OTI4.YkfykA.0uE2lCQ9kvY-skNMXQ6knDCcz1A'

# Suppress noise about console usage from errors
youtube_dl.utils.bug_reports_message = lambda: ''
bot = commands.Bot(command_prefix=commands.when_mentioned_or("-"))
discord_intents = discord.Intents.all()
client = discord.Client()
guild = discord.utils.get(client.guilds, name="名前")
omu_id = '<@582151968987021312>'
args = sys.argv

ytdl_format_options = {
    'format': 'bestaudio/best',
    'outtmpl': '%(extractor)s-%(id)s-%(title)s.%(ext)s',
    'restrictfilenames': True,
    'noplaylist': True,
    'nocheckcertificate': True,
    'ignoreerrors': False,
    'logtostderr': False,
    'quiet': True,
    'no_warnings': True,
    'default_search': 'auto',
    'source_address': '0.0.0.0' # bind to ipv4 since ipv6 addresses cause issues sometimes
}

ffmpeg_options = {
    'options': '-vn'
}

ytdl = youtube_dl.YoutubeDL(ytdl_format_options)


class YTDLSource(discord.PCMVolumeTransformer):
    def __init__(self, source, *, data, volume=0.5):
        super().__init__(source, volume)

        self.data = data

        self.title = data.get('title')
        self.url = data.get('url')

    @classmethod
    async def from_url(cls, url, *, loop=None, stream=False):
        loop = loop or asyncio.get_event_loop()
        data = await loop.run_in_executor(None, lambda: ytdl.extract_info(url, download=not stream))

        if 'entries' in data:
            # take first item from a playlist
            data = data['entries'][0]

        filename = data['url'] if stream else ytdl.prepare_filename(data)
        return cls(discord.FFmpegPCMAudio(filename, **ffmpeg_options), data=data)

# 接続に必要なオブジェクトを生成
client = discord.Client()

#関数
async def reply(message):
    reply = f'{message.author.mention} は？' # 返信メッセージの作成
    await message.channel.send(reply) # 返信メッセージを送信
# def play_voice(text):
#     wav = tsukuyomichan_talksoft.generate_voice(text, 0)
#     sound = pydub.AudioSegment.from_wav("out.wav")
#     sound.export("out.mp3", format="mp3")
#     voiceChannel.play(FFmpegPCMAudio("out.mp3"))
# 起動時に動作する処理
@client.event
async def on_ready():
    # 起動したらターミナルにログイン通知が表示される
    print('ログインしました')

@client.event
# bot = commands.Bot(
#     command_prefix="!",
#     activity=discord.Game("Qiita") # Qiitaをプレイ中
# )
# 返信する非同期関数を定義
async def on_message(message: discord.Message):
    if client.user in message.mentions: # 話しかけられたかの判定
        await reply(message) # 返信する非同期関数を実行
    # メッセージの送信者がbotだった場合は無視する
    if message.author.bot:
        return
    # 「/neko」と発言したら「にゃーん」が返る処理
    if re.search('社畜',message.content) :
        await message.channel.send('レゔァさん？')
    if re.search('オウルキャット',message.content) :
        await message.channel.send('新茶？')
    if re.search('社適',message.content) :
        await message.channel.send('おむ？')
    if re.search('優秀',message.content) or re.search('やる',message.content):
        await message.channel.send('あざす')
    if re.search('良',message.content) or re.search('よさ',message.content) or re.search('いいね',message.content):
        await message.channel.send('あざす')
    if re.search('できた',message.content) or re.search('成長',message.content):
        await message.channel.send('せやろ')
    if re.search('ナイス',message.content) or re.search('ないす',message.content):
        await message.channel.send('やろ')
    if re.search('社不',message.content) :
        await message.channel.send('リヴィ？')
    if re.search('姦',message.content) :
        await message.channel.send('殴る殴る殴る')
    if re.search('女',message.content) :
        if re.search('幼女',message.content):
            await message.channel.send('可愛い')
        else:
            await message.add_reaction("😙")
            a = random.randrange(2)
            if a == 1:
                await message.channel.send('殴る')
            else:
                await message.channel.send('叩く')
        # print('')
    if message.content=='/neco':
        await message.channel.send('にゃーん')
        # print()
    if message.content=='p' or message.content=='P' or message.content=='ｐ' or message.content=='Ｐ':
        id = '<@458621952299368469>'
        await message.channel.send(f'{id}')
    if message.content.startswith('!pouzu '):
        id = '<@458621952299368469>'
        pouzu = message.content[7:]
        for i in range(int(pouzu)):
            await message.channel.send(f'{id}')
            if i == 5:
                await message.channel.send("5回以上は可哀想")
                break
    if re.search(f'{omu_id}',message.content) or re.search('!omu ',message.content):
        if re.search(f'{omu_id}',message.content):
            ms = message.content[21:]
        else:
            ms = message.content[4:]
        if str(args[1]) == 's':
            await message.channel.send('取り込み中:伝えとく')
        print(message.guild,message.channel,message.author,str(ms))
    if message.content.startswith('!d '):
        n = message.content[3:]
        a = random.randrange(int(n))
        await message.channel.send(str(a))
    if message.content=='!help' or message.content=='!h':
        await message.channel.send("!join or !j : VCに繋ぐ")
        await message.channel.send("!leave or !l : VC切る")
        await message.channel.send("!play or !p : 曲流す ex)!p 君が代")
        await message.channel.send("!stop or !s : 曲停止")
        await message.channel.send("!d : 乱数 ex)!d 6")
        await message.channel.send("!omu : おむにメッセージを送る")
    if message.content == "!join" or message.content == "!j":
        if message.author.voice is None:
            st = str(message.author)
            for i in range(len(st)):
                if st[i] == '#':
                    NAME = st[0:i]
            await message.channel.send("いや"+str(NAME)+"ボイチャにいなくね？")
            return
        # ボイスチャンネルに接続する
        await message.author.voice.channel.connect()
        if str(message.guild) == '雷神窓':
            await message.channel.send("こんばんwaaa")
        else:
            await message.channel.send("こん")
    elif message.content == "!leave" or message.content == "!l":
        if message.guild.voice_client is None:
            await message.channel.send("接続してない")
            return
        # 切断する
        await message.guild.voice_client.disconnect()
        await message.channel.send("落ちます、おつです")
        os.system("rm *.m4a")
        os.system("rm *.webm")
    elif message.content.startswith("!play ") or message.content.startswith("!p "):
        await message.channel.send("ちょっと待って")
        if message.guild.voice_client is None:
            await message.channel.send("接続してない")
            return
        # 再生中の場合は再生しない
        if message.guild.voice_client.is_playing():
            await message.channel.send("待て")
            return
        if message.content.startswith("!play "):
            url = message.content[6:]
        else:
            url = message.content[3:]
        # if os.path.isfile(url) = False
        # youtubeから音楽をダウンロードする
        player = await YTDLSource.from_url(url, loop=client.loop)
        # 再生する
        if message.content.startswith("!loop "):
             num = message.content[6:]
             for i in range(int(num)):
                 message.guild.voice_client.play(player)
                 if message.content == "!stop" or message.content == "!s":
                     message.guild.voice_client.stop()
                     await message.channel.send("とめたよ")
                     break
             return
        message.guild.voice_client.play(player)
        await message.channel.send(str(player.title) + ' を再生')
    elif message.content == "!stop" or message.content == "!s":
        if message.guild.voice_client is None:
            await message.channel.send("誰もいねー")
            return
        # 再生中ではない場合は実行しない
        if not message.guild.voice_client.is_playing():
            await message.channel.send("再生していません。")
            return
        message.guild.voice_client.stop()
        await message.channel.send("とめたよ")
    # play_voice(message.content)
# Botの起動とDiscordサーバーへの接続
client.run(TOKEN)
